/*
The Event-based Dynamic protocol evaluation
======================================

Authors   : 	Pahlevi, Rizka Reza; Shimada, Hajime
Created on:   August 14th 2023	
Update on : 	August 14th 2023

The proposed of this evaluation is to evaluate the event-based dynamic protocol porposed by Pahlevi et al. 

*/

theory EventBasedDynamic
begin

builtins: hashing, asymmetric-encryption, symmetric-encryption

// Registering the seedi
rule Agreed_seed:
    [ Fr(~seed) ]
  -->
    [ !Lts($A, ~seed) ]

rule ComputedPr:
  let
    PR = <~seed ,~qprime>
  in
    [ Fr(~qprime)
    , Fr(~prime)
    , Fr(~n)
    , Lts($A, ~seed)
    ]
  -->
    [!Cpr($A, ~qprime, ~prime, ~n, ~seed, PR)
    ]
  
rule ComputedEV:
  let
    EV = <PR, rc>
  in
    [
      !Cpr($A, ~qprime, ~prime, ~n, ~seed, PR)
      , Fr(~rc)
    ]
    -->
    [
      !Cev($A, ~rc, senc(EV, rc)) 
    ]

rule Contact_1:
    [
      !Ltk($A, ~seed)
      , !Cpr(A, qprime, prime, n, seed, PR)
      , !Cev(A, rc, senc(EV, rc)) 
    ]
    --[SessionSeed1(A, seed)]->
    [
      !Contact1($A, $B, ~seed, ~qprime, ~prime, ~n, ~rc, PR, senc(EV, rc))
      , Out(senc(EV, rc))
    ]

rule Contact_2:
    [
      In(senc(EV, rc))
      , !Contact1(A, B, seed, qprime, prime, n, rc, PR, senc(EV, rc))
      , !Ltk($A, ~seed1)
      , !Cpr($A, ~qprime, ~prime, ~n, ~seed1, PR)
      , !Cev($A, ~rc, senc(EV, rc)) 
    ]
    --[SessionSeed2(A, B ,seed1)]->
    [
      !Contact2($A, $B, ~seed1, ~qprime, ~prime, ~n, ~rc, PR, senc(EV, rc))
      , Out(senc(EV, rc))
    ]

rule Contact_3:
  [
    In(senc(EV, rc))
    , !Contact2(A, B, seed1, qprime, prime, n, rc, PR, senc(EV, rc))
  ]
  --[SessionSeed3(A, B, seed1)]->
  [

  ]


lemma Client_session_key_secrecy1:
  " /* It cannot be that a  */
    not(
      Ex S k #i #j.
        /* client has set up a session key 'k' with a server'S' */
        SessionSeed1(S, k) @ #i
        /* and the adversary knows 'k' */
        & K(k) @ #j
    )
  "
lemma Client_session_key_secrecy2:
  " /* It cannot be that a  */
    not(
      Ex S Q k #i #j.
        /* client has set up a session key 'k' with a server'S' */
        SessionSeed2(S, Q, k) @ #i
        /* and the adversary knows 'k' */
        & K(k) @ #j
    )
  "
lemma Client_session_key_secrecy3:
  " /* It cannot be that a  */
    not(
      Ex S Q k #i #j.
        /* client has set up a session key 'k' with a server'S' */
        SessionSeed3(S, Q, k) @ #i
        /* and the adversary knows 'k' */
        & K(k) @ #j
    )
  "

end