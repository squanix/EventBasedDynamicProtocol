/*
The Event-based Dynamic protocol evaluation
======================================

Authors   : 	Pahlevi, Rizka Reza; Shimada, Hajime
Created on:   August 14th 2023	
Update on : 	August 16th 2023

The proposed of this evaluation is to evaluate the event-based dynamic protocol porposed by Pahlevi et al. 

*/

theory EventBasedDynamic
begin

builtins: diffie-hellman, symmetric-encryption

rule Agreed_SymKey:
  [ Fr(~keyr) ]
  -->
  [ !SymKey($A, ~keyr) ]

// Registering the seedi
rule Agreed_seed:
    [ Fr(~seed) ]
  -->
    [ !Lts($A, ~seed), !Ltsd($A, ~seed) ]

/*
  Key distribution
*/
rule Enrollment:
  [ 
    !SymKey($A, ~keyr)
  ]
  --[Once(), Secure(~keyr)]->
  [
    !AB($A, $B, ~keyr)
  ]

rule ComputedPr:
  let
    Y = ~seed^'qprime'
    T = Y^('qroot'*~n)
    PR = T*('qprime'*'prime')
  in
    [ 
    Fr(~n)
    , !Ltsd($A, ~seed)
    ]
  -->
    [
      !Cpr($A, ~n, PR, ~seed)
    ]
  
rule ComputedEV:
  let
    E = <PR, ~rc>
  in
    [
      Fr(~rc)
      , !Cpr($A, n, PR, seed)
    ]
    -->
    [
      !Cev(E, n, PR, seed) 
    ]

/*
  Initiation State
*/

rule Init_A_B:
  [!AB($A, $B, keyr) ]
  -->
  [!KeyAB($A, $B, keyr)]

rule Contact_1:
    [
     !Cev(E, n, PR, seed) 
     , !KeyAB(A, B, keyr)
    ]
    --[SessionSeed1(A, E), Role('A'), Secret(seed), SeedA(A, seed), SendA(A, E)]->
    [
      !Contact1(A, B, n, PR, E)
      , Out(senc(E, keyr))
    ]

rule Contact_2:
    [
      In(ev1)
      , !Cev(E1, n1, PR1, seed1)
      , !KeyAB(A, B, keyr)
    ]
    --[SessionSeed2(A, E1), SesSeed(A, sdec(E1, keyr)), Role('B'), Secret(seed1), SeedB(B, seed1), SendB(B, E1), ReceiveB(A, E1)]->
    [
      !Contact2(B, A, n1, PR1, E1)
      , Out(senc(E1, keyr))
    ]

lemma Client_session_seed_secrecy:
  "
    not (
      Ex S k k1 #i #j #r.
        SessionSeed1(S, k) @ #i
        & SessionSeed2(S, k1) @ #j
        & K(k) @ #r
        & K(k1) @ #r
    )
  "

lemma seed_A:
	"
  All x #i.
	  Secret(x) @i & Role('A') @i==> 
	  (not(Ex #j. K(x)@j)) 
  "

lemma seed_B:
	"
  All x #i.
    Secret(x) @i & Role('B') @i==> 
    (not(Ex #j. K(x)@j)) 
  "

lemma executable: exists-trace
"
  Ex A B m #i #j.
      SendA(A,m) @i & ReceiveB(B,m) @j & i < j
"

lemma AuthSeed:
"
 All A B s g #i #j.
    SeedA(A, s) @i & SeedB(B, g) @j & i < j ==>
    (
      not (Ex #k. K(s)@k & K(g)@k)
    )
"
end