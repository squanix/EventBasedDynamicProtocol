/*
The Event-based Dynamic protocol evaluation
======================================

Authors   : 	Pahlevi, Rizka Reza; Shimada, Hajime
Created on:   August 14th 2023	
Update on : 	August 16th 2023

The proposed of this evaluation is to evaluate the event-based dynamic protocol porposed by Pahlevi et al. 

*/

theory EventBasedDynamic
begin

builtins: diffie-hellman, symmetric-encryption

rule Agreed_SymKey:
  [ Fr(~R) ]
  -->
  [ !SymKey(~R) ]

// Registering the seedi
rule Agreed_seed:
    [ Fr(~seed) ]
  -->
    [ !Lts($A, ~seed), !Ltsd($A, ~seed) ]

/*
  Key distribution
*/
rule Enrollment:
  [ 
    !SymKey(~R)
  ]
  --[Once(), Secure(~R)]->
  [
    A0($A, $B, ~R), B0($B, $A, ~R)
  ]

rule ComputedPr:
  let
    Y = seed^'qprime'
    T = Y^('qroot'*~n)
    PR = T*('qprime'*'prime')
  in
    [ 
    Fr(~n)
    , !Ltsd($A, seed)
    ]
  -->
    [
      !Cpr($A, ~n, PR, seed)
    ]
  
rule ComputedEV:
  let
    E = <PR, ~rc>
  in
    [
      Fr(~rc)
      , !Cpr($A, n, PR, seed)
    ]
    -->
    [
      !Cev(E, n, PR, seed) 
    ]

/*
  Initiation State
*/

rule Init_A:
  [ Fr(~id), A0(A, B, R) ]
  --[ Initialise(A, ~id), Role('A')]->
  [ A1(A, B, R), !KeyA(A, R)]

rule Init_B:
  [ Fr(~id), B0(B, A, R)]
--[ Initialise(B, ~id), Role('B')]->
  [ B1(B, A, R), !KeyB(B, R)]


rule Contact_1:
    [
     !Cev(E, n, PR, seed) 
     , A1(A, B, R)
    ]
    --[SessionSeed1(A, E), Role('A'), Secret(seed), SendA(A, E)]->
    [
      !Contact1(A, B, n, PR, R, seed, E)
      , Out(senc(E, R))
    ]

rule Contact_2:
    [
      In(ev1)
      , !Cev(E, n, PR, seed) 
      , B1(B, A, R)
    ]
    --[SessionSeed2(A, E), SesSeed(A, sdec(E, R)), Role('B'), Secret(seed), SendB(B, E), ReceiveB(A, E)]->
    [
      !Contact2(B, A, n, PR, R, seed, E)
      , Out(senc(E, R))
    ]

lemma Client_session_seed_secrecy:
  "
    not (
      Ex S k k1 #i #j #r.
        SessionSeed1(S, k) @ #i
        & SessionSeed2(S, k1) @ #j
        & K(k) @ #r
        & K(k1) @ #r
    )
  "

lemma seed_A:
	"All x #i.
	Secret(x) @i & Role('A') @i==> 
	(not(Ex #j. K(x)@j)) 
  "

lemma seed_B:
	"All x #i.
	Secret(x) @i & Role('B') @i==> 
	(not(Ex #j. K(x)@j)) 
  "

lemma executable: exists-trace
"Ex A B m #i #j.
    SendA(A,m) @i & ReceiveB(B,m) @j & i < j"
end